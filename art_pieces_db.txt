CREATE TABLE art_pieces(
id INTEGER PRIMARY KEY,
artist_id INTEGER NOT NULL,

title VARCHAR(500) NOT NULL,
painting_technique VARCHAR(300) NOT NULL,
description VARCHAR(3000),
short_description VARCHAR(500),
slug VARCHAR(100) UNIQUE,
period_label VARCHAR(200),
created_where VARCHAR(200) DEFAULT "Sconosciuta", 
momentary_position VARCHAR(200) DEFAULT "Sconosciuta",
height_cm DECIMAL(6,2),
width_cm DECIMAL(6,2),
bibliography VARCHAR(3000),
commissioned_by VARCHAR(200),
img_url VARCHAR(500) NOT NULL,

created_in VARCHAR(100),

CHECK(created_in < CURRENT_DATE),
FOREIGN KEY(painting_technique_id) REFERENCES painting_techniques(id),
FOREIGN KEY(artist_id) REFERENCES artists(id)
);

CREATE TABLE artists(
id INTEGER PRIMARY KEY,

name VARCHAR(200) DEFAULT 'Autore Ignoto',
born_where VARCHAR(200),
died_where VARCHAR(200),

born_in DATE,
died_in DATE,

CHECK (died_in IS NULL OR born_in IS NULL OR died_in >= born_in)
);

CREATE TABLE architectures(
id INTEGER PRIMARY KEY,
art_piece_id INTEGER NOT NULL,

type VARCHAR(500) NOT NULL, --no additional table because they can be too unique
description VARCHAR(3000), --no short_desc because it's detail_page,
img_url VARCHAR(500) NOT NULL,

FOREIGN KEY(art_piece_id) REFERENCES art_pieces(id)
);

CREATE TABLE components(
id INTEGER PRIMARY KEY,
architecture_id INTEGER NOT NULL,

type VARCHAR(200) NOT NULL,
description VARCHAR(3000) NOT NULL,
img_url VARCHAR(500) NOT NULL,

FOREIGN KEY(architecture_id) REFERENCES architectures(id)
);


-- INSERT INTO EXAMPLES

-- ARTISTS
INSERT INTO artists(name, born_where, died_where, born_in, died_in)
VALUES
('Ercole de'' Roberti', 'Ferrara', 'Ferrara', '1450-01-01', '1496-05-18');

-- ART PIECES
INSERT INTO art_pieces(
    painting_technique,artist_id, title, description, short_description, slug, period_label, created_where, momentary_position, height_cm, width_cm, bibliography, img_url, created_in
)
VALUES(
    'Tempera su Tela', 1,
    'Istituzione dell'' Eucarestia',
    'Gesù siede a capotavola, circondato dai suoi discepoli, tenendo in mano un pezzo di pane, che benedice: questa è l''Ultima Cena. L''abilità di Ercole nel dipingere dettagli su piccola scala è evidente: ogni discepolo ha un''espressione facciale diversa, e i bicchieri trasparenti, le caraffe e i bocconcini di pane sul tavolo sono dipinti come una minuscola natura morta.',
    'Scena dell''ultima cena.',
    'istituzione-dell-eucarestia',
    'Seconda metà dell'' 400',
    'Ferrara',
    'Londra - National Gallery',
    29.8,
    21,
    'DANESI,SGARBI 2023',
    'https://www.crossroadsinitiative.com/wp-content/uploads/2021/06/The-Institution-of-the-Eucharist-Ercole-de-Robert-national-gallery-public-domain.jpg',
    '1493-1496'
);

-- PAINTED ARCHITECTURES
INSERT INTO architectures(art_piece_id, type, description, img_url)
VALUES(
    1,
    'Ambiente architettonico interno',
    'Interno coperto a cassettoni con paraste che sorreggono una trabeazione',
    'https://www.crossroadsinitiative.com/wp-content/uploads/2021/06/The-Institution-of-the-Eucharist-Ercole-de-Robert-national-gallery-public-domain.jpg'
);

-- COMPONENTS
INSERT INTO components(architecture_id, type, description, img_url)
VALUES(
    1,
    'Capitello',
    'Capitello con calato liscio e abaco dritto',
    'https://www.crossroadsinitiative.com/wp-content/uploads/2021/06/The-Institution-of-the-Eucharist-Ercole-de-Robert-national-gallery-public-domain.jpg'
);


-- EXAMPLE QUERIES
-- 1. SHOW ALL ART PIECES AND THEIR ARTIST
EXPLAIN QUERY PLAN
SELECT a.title, a.painting_technique, ar.name AS artist
FROM art_pieces a
JOIN artists ar ON a.artist_id = ar.id;

-- 2.ALL ART PIECES OF A CERTAIN ARTIST
EXPLAIN QUERY PLAN
SELECT title, period_label, created_where
FROM art_pieces
WHERE artist_id = 1;

-- 3. COUNT ART PIECES FOR EACH PAINTING TECHNIQUE
EXPLAIN QUERY PLAN
SELECT painting_technique, COUNT(id) AS num_art_pieces
FROM art_pieces
GROUP BY painting_technique;

-- 4. LIST ARCHITECTURES AND THEIR COMPONENTS FOR A PARTICULAR ART PIECE
EXPLAIN QUERY PLAN
SELECT ar.type AS architecture, c.type AS component, c.description
FROM architectures ar
JOIN components c ON ar.id = c.architecture_id
WHERE ar.art_piece_id = 1;

-- 5. ART PIECES HIGHER THAN 1 METER
EXPLAIN QUERY PLAN
SELECT title, height_cm, width_cm
FROM art_pieces
WHERE height_cm > 100;

-- 6. ART PIECES CONTAINING A PARTICULAR WORD
EXPLAIN QUERY PLAN
SELECT title, description
FROM art_pieces
WHERE title LIKE '%Eucarestia%' OR description LIKE '%Eucarestia%';

-- 7. YOUNGEST ARTIST
EXPLAIN QUERY PLAN
SELECT name, born_in
FROM artists
ORDER BY born_in DESC
LIMIT 1;


-- INDEXES
-- 1. ARTIST ID FOREIGN KEY - ART PIECES
CREATE INDEX idx_art_pieces_artist_id ON art_pieces(artist_id);

-- 2. PERIOD LABEL - ART PIECES
CREATE INDEX idx_art_pieces_period_label ON art_pieces(period_label);

-- 3. PAINTING TECHNIQUE - ART PIECES 
CREATE INDEX idx_art_pieces_technique ON art_pieces(painting_technique);

-- 4. ART PIECE ID FOREIGN KEY - ARCHITECTURES
CREATE INDEX idx_architectures_art_piece_id ON architectures(art_piece_id);

-- 5. ARCHITECTURE ID FOREIGN KEY - COMPONENTS
CREATE INDEX idx_components_architecture_id ON components(architecture_id);


-- VIEWS
-- 1. ARTISTS WITH MISSING VALUES
CREATE VIEW missing_artists_values AS(
SELECT id,
name,
COALESCE(NULLIF(TRIM(born_where),''),'Mancante') AS missing_born_location,
COALESCE(NULLIF(TRIM(died_where),''),'Mancante') AS missing_death_location,
born_in AS data_nascita,
died_in AS data_morte
FROM artists
WHERE
NULLIF(TRIM(born_where), '') IS NULL
OR NULLIF(TRIM(died_where), '') IS NULL
OR born_in IS NULL
OR died_in IS NULL
);

-- 2. ARCHITECTURES WITH MISSING DESCRIPTION
CREATE VIEW missing_architecture_description AS(
SELECT id,
art_piece_id,
type,
COALESCE(NULLIF(TRIM(description),''),'Mancante') as missing_description
FROM architectures
WHERE NULLIF(TRIM(description),'') IS NULL
);

-- 3. ARTPIECES WITH MISSING VALUES
CREATE VIEW missing_art_pieces_values AS (
SELECT title,
COALESCE(NULLIF(TRIM(short_description),''),'Mancante') AS missing_short_desc,
COALESCE(NULLIF(TRIM(description),''),'Mancante') AS missing_desc,
COALESCE(NULLIF(TRIM(period_label),''),'Mancante') AS missing_period,
COALESCE(NULLIF(TRIM(bibliography),''),'Mancante') AS missing_bibliography
FROM art_pieces
WHERE 
NULLIF(TRIM(short_description),'') IS NULL
OR NULLIF(TRIM(description),'') IS NULL
OR NULLIF(TRIM(period_label),'') IS NULL
OR NULLIF(TRIM(bibliography),'') IS NULL
);



-- UPDATE PROCESS
-- EXAMPLE A
-- 1. FINDING MISSING VALUES - E.G. ARTISTS
SELECT * 
FROM missing_artists_values
LIMIT 10;

-- 2. UPDATING THE MISSING VALUE
UPDATE artists
SET born_where = 'Ferrara'
WHERE id = 1;

-- EXAMPLE B
-- 1. FINDING MISSING VALUES E.G. ARTPIECE PERIOD LABEL
SELECT * 
FROM missing_art_pieces_values
WHERE TRIM(missing_period) = 'Mancante'
AND id <= 50;

-- 2. UPDATING MISSING VALUE
UPDATE art_pieces
SET missing_period = 'Prima metà dell\' 400'
WHERE id = 1


-- DELETE PROCESS
-- IDENTIFY ROWS TO DELETE AND DELETE
WITH to_delete AS (
SELECT id 
FROM art_pieces
WHERE title LIKE '%pizza%'
AND title LIKE '%ananas%'
)
DELETE FROM art_pieces 
WHERE id IN (SELECT id FROM to_delete);
